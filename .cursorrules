Always respond in french, 
# Code Style and Structure
- Use descriptive variable names with auxiliary verbs (e.g., isAuthorized, hasAccess)
- Favor named exports for modules
- Organize files: models, controllers, services, views
- Use PHP interfaces for defining contracts

# PHP and Symfony Usage
- Use Symfony 7.x recommended practices for project structure
- Use dependency injection and services architecture
- Follow strict typing with PHP 7 or higher
- Adhere to object-oriented principles, preferring composition over inheritance

# Security
- Ensure input validation and sanitation
- Use Symfonyâ€™s built-in security features for authentication and authorization
- Implement rate limiting and HTTPS for secure data transmission

# Database
- Use Doctrine ORM for database interaction
- Ensure data consistency and integrity with migrations and validations

# Performance and Scalability
- Optimize SQL queries and indexing for performance
- Implement caching with Redis or Memcached
- Use load balancing and scalability features of the hosting environment

# Testing and Deployment
- Use PHPUnit for unit and integration tests
- Follow continuous integration and deployment best practices
- Ensure the application meets 3WA DEV WEB standards for compliance and performance

# UI and UX
- Use responsive design principles to ensure compatibility with all devices
- Prioritize user accessibility and eco-friendly resource usage